[{"path":[]},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement konrad.rudolph@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://klmr.me/box/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://klmr.me/box/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution guidelines","title":"Contribution guidelines","text":"Please refer contribution guide ‘box’ website.","code":""},{"path":"http://klmr.me/box/articles/box.html","id":"using-modules","dir":"Articles","previous_headings":"","what":"Using modules","title":"Get started","text":"purpose tutorial, going use example module bio/seq. module implements basic mechanisms dealing DNA sequences (= character strings consisting letters , C, G T). First, load module: function box::use accepts list unquoted, qualified module names. module names load single module make available caller form. code , ’ve loaded single module, bio/seq. bio serves parent module may group several submodules. Since module name inside box::use starts ./, module location resolved locally, .e. relative path currently running code. , seq module’s proper name. bio/seq fully qualified name. ./bio/seq use declaration. see effect use declaration, let’s inspect workspace: used module’s fully qualified name load . , shown ls, loading module way introduces single new name current scope, module , identified proper (non-qualified) name. see names module exports, use ls , time module : appears seq exports 4 different names. access exported names, use $ operator: seq$is_valid allows us use first function list exported names. can also display interactive help individual names using box::help function, e.g.: Now let’s actually use module. seq function inside bio/seq module constructs set (optionally named) biological sequences: Note automatically get pretty-printed (FASTA) output print method (gets called implicitly ) specialised 'bio/seq' S3 class bio/seq module (prefixing S3 classes inside modules full module name convention avoid name clashes S3 classes): source code `print.bio/seq` contains interesting use declaration: showcases alternative way invoking box::use, ’ll explore now.","code":"box::use(./bio/seq) ls() ## [1] \"seq\" seq ## <module: ./bio/seq> ls(seq) ## [1] \"is_valid\" \"revcomp\"  \"seq\"      \"table\" box::help(seq$revcomp) s = seq$seq(     gene1 = 'GATTACAGATCAGCTCAGCACCTAGCACTATCAGCAAC',     gene2 = 'CATAGCAACTGACATCACAGCG' )  seq$is_valid(s) ## [1] TRUE s ## 2 DNA sequences: ##   >gene1 ##   GATTACAGATCAGCTCAGCACCTAGCA... ##   >gene2 ##   CATAGCAACTGACATCACAGCG getS3method('print', 'bio/seq') ## function (x) { ##     box::use(stringr[trunc = str_trunc]) ##  ##     if (is.null(names(x))) names(x) = paste('seq', seq_along(x)) ##  ##     cat( ##         sprintf('%d DNA sequence%s:\\n', length(x), if (length(x) == 1L) '' else 's'), ##         sprintf('  >%s\\n  %s\\n', names(x), trunc(x, 30L)), ##         sep = '' ##     ) ##     invisible(x) ## } ## <environment: 0x11ffb1600>"},{"path":"http://klmr.me/box/articles/box.html","id":"attaching-modules","dir":"Articles","previous_headings":"","what":"Attaching modules","title":"Get started","text":"Let’s look alternative ways using modules. start, let’s unload bio/seq module … … load , via different route: unloading already loaded module, options(box.path = …) sets module search path: box::use searches modules. one path given, box::use searches module matching name found. works analogously .libPaths operates R packages. box::use directive can now use bio/seq instead ./bio/seq module name: rather relative name specify global name. example set search path current working directory normal usage global library location, e.g. (following XDG base directory specification) ~/.local/share/R/modules Linux. Note non-local module names must fully qualified, nested modules: box::use(foo/bar) works, box::use(bar) (instead, assumed bar refers package)! declaration use [revcomp, is_valid] specify names revcomp is_valid bio/seq module attached calling environment. […] part attach specification: comma-separated list names inside parentheses specifies names attach. special symbol ... can used specify exported names attached. effect similar conventional package loading via library (attaching environment): attached names now available direct use without necessitating seq$ qualifier: However, unlike attach function, module attachment happens current, local scope . Since code executed global environment, ’s distinction local global scope: Note second item, reads “mod:bio/seq”. let’s now undo , attach (use) module locally instead: Unlike , now attaching exported names instead specifying individual names. subsequent line code uses seq$table function rather base::table (different output). note seq module’s table function attached outside local scope: powerful, isolates separate scopes effectively attach function. , modules used attached inside another module remain inside module visible outside module default. Nevertheless, normal, recommended usage module without attach specification, makes clearer names referring .","code":"box::unload(seq) options(box.path = getwd()) box::use(bio/seq[revcomp, is_valid]) is_valid(s) ## [1] TRUE revcomp(s) ## 2 DNA sequences: ##   >gene1 ##   GTTGCTGATAGTGCTAGGTGCTGAGCT... ##   >gene2 ##   CGCTGTGATGTCAGTTGCTATG search() ##  [1] \".GlobalEnv\"        \"mod:bio/seq\"       \"package:stats\"     ##  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"     ##  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"         ## [10] \"tools:callr\"       \"package:base\" detach()  seq_table = function (s) {     box::use(./bio/seq[...])     table(s) }  seq_table(s) ## $gene1 ##  A  C  G  T  ## 13 12  6  7  ##  ## $gene2 ## A C G T  ## 8 7 4 3 search() ##  [1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\"  ##  [4] \"package:grDevices\" \"package:utils\"     \"package:datasets\"  ##  [7] \"package:methods\"   \"Autoloads\"         \"tools:callr\"       ## [10] \"package:base\" table(s) ## s ##                 CATAGCAACTGACATCACAGCG GATTACAGATCAGCTCAGCACCTAGCACTATCAGCAAC  ##                                      1                                      1"},{"path":"http://klmr.me/box/articles/box.html","id":"writing-modules","dir":"Articles","previous_headings":"","what":"Writing modules","title":"Get started","text":"module bio/seq, used previous section, implemented file bio/seq.r. file seq.r , large, regular R source file, happens live directory named bio. fact, three things worth mentioning: Documentation: functions module file can documented using ‘roxygen2’ syntax. works packages. ‘box’ package parses documentation makes available via box::help. Displaying module help requires ‘roxygen2’ installed. Export declarations: similar packages, modules explicitly need declare names export; using annotation comment #' @export front name assignment. , works similarly ‘roxygen2’ (require package installed). S3 functions: ‘box’ registers exports functions automatically necessary, works user generics defined inside module. overriding “known generics” (print), need register manually via register_S3_method (necessary since functions inherently ambiguous automatic way finding ).","code":""},{"path":"http://klmr.me/box/articles/box.html","id":"nesting-modules","dir":"Articles","previous_headings":"","what":"Nesting modules","title":"Get started","text":"Modules can also form nested hierarchies. fact, implementation bio (bio/__init__.r: since bio directory rather file, module implementation resides nested file __init__.r): submodule specified ./seq rather seq: explicitly provided relative path prevents lookup import search path (set via options(box.path = …)); instead, current directory (, directory containing bio module) considered. applied box::use declaration, @export causes names imported declaration also exported: module name created declaration (, seq) exported -. Furthermore, attached name likewise exported. Refer box::use documentation examples details names exported. Coming back example module, can now use bio module: also implemented bio follows: made seq’s definitions immediately available bio, without always write seq$…. sometimes useful, employed care: explicit namespaces generally increases code robustness readability.","code":"#' @export box::use(./seq) options(box.path = NULL) # Reset search path box::use(./bio) ls(bio) ## [1] \"seq\" ls(bio$seq) ## [1] \"is_valid\" \"revcomp\"  \"seq\"      \"table\" bio$seq$revcomp('CAT') ## 1 DNA sequence: ##   >seq 1 ##   ATG #' @export box::use(./seq[...])"},{"path":"http://klmr.me/box/articles/box.html","id":"code-execution-on-loading","dir":"Articles","previous_headings":"","what":"Code execution on loading","title":"Get started","text":"Modules define functions values. execute code module loaded, put inside function name .on_load. function similar hook .onLoad package namespace event. function executed first time module loaded R session. Subsequent calls box::use module, regardless whether occur different scope, refer already loaded, cached module, reload module. can illustrate loading module side-effects, info. Let’s use : imported module, get diagnostic messages. Let’s re-use module: … messages displayed. However, can explicitly reload module. clears cache, loads module . can useful development debugging: displays messages . reload function shortcut unload followed import (using exact arguments used original import call).","code":".on_load = function (ns) {     message(         'Loading module \"', box::name(), '\"\\n',         'Module path: \"', basename(box::file()), '\"'     ) }  box::export() # Mark as a ‘box’ module. box::use(./info) ## Loading module \"info\" ## Module path: \"vignettes\" box::use(./info) box::reload(info) ## Loading module \"info\" ## Module path: \"vignettes\""},{"path":"http://klmr.me/box/articles/box.html","id":"module-helper-functions","dir":"Articles","previous_headings":"Code execution on loading","what":"Module helper functions","title":"Get started","text":"info module also show-cases two important helper functions: box::name returns name module loaded. especially handy , called outside module, box::name NULL. allows testing whether piece code loaded module, invoked directly (e.g. via Rscript command line). box::file similar system.file: returns full path file within directory module stored. useful distributing data files modules, loaded within module. invoked without arguments, box::file returns full path directory containing module source file.","code":""},{"path":"http://klmr.me/box/articles/compiled-code.html","id":"current-status","dir":"Articles","previous_headings":"","what":"Current status","title":"Using compiled code","text":"‘box’ package doesn’t built-foreign function interface yet possible integrate compiled code via R’s SHLIB mechanism building shared libraries. particular, also works packages Rcpp. time , following steps unfortunately require manual work: Compile code module installed loaded first time. Load compiled shared library module loaded. Interface compiled code via function calls. guide aims describe steps sufficient detail make easy. long run, plan automate steps.","code":""},{"path":"http://klmr.me/box/articles/compiled-code.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Using compiled code","text":"demonstrate steps, use example module named c uses compiled code written C. C code want make usable R module, saved file c/hello.c: addition, compiled code often includes specific compilation instructions. unnecessary simple example, ’s included anyway completeness. R, compilation instructions contained file called Makevars:","code":"#include \"R.h\" #include \"Rdefines.h\"  #include <stdio.h>  SEXP hello_world(SEXP name) {     char const msg_template[] = \"Hello from C, %s!\";     char const *const c_name = CHAR(asChar(name));     char *const msg_buf = R_alloc(sizeof msg_template - 2 + strlen(c_name) + 1, 1);     sprintf(msg_buf, msg_template, c_name);     return mkString(msg_buf); } PKG_CFLAGS = -std=c11 -pedantic -Wall -Wextra -Werror"},{"path":"http://klmr.me/box/articles/compiled-code.html","id":"compile-code","dir":"Articles","previous_headings":"","what":"Compile code","title":"Using compiled code","text":"make code loadable callable R, compiled via R CMD SHLIB mechanism. needs happen module, first loaded. convention, code go submodule called __setup__. convention makes clear “special” module, intended direct consumption module user. module specifies object files compile, invokes R CMD SHLIB: principle, last line file need changed C projects. place, can invoke compilation loading c/__setup__ submodule: result compilation single file, hello.(Unix macOS) hello.dll (Windows) represents shared library file, can load use inside R.","code":"build_shared_lib = function (object_names) {     # Change working directory so R finds the Makevars.     old_dir = setwd(box::file())     on.exit(setwd(old_dir))     exitcode = system2('R', c('CMD', 'SHLIB', paste0(object_names, '.c')))     stopifnot(exitcode == 0L) }  build_shared_lib('hello') box::use(./c/`__setup__`)"},{"path":"http://klmr.me/box/articles/compiled-code.html","id":"loading-compiled-code","dir":"Articles","previous_headings":"","what":"Loading compiled code","title":"Using compiled code","text":"Compiled code shared library loaded R using dyn.load command. happen inside module uses /exposes compiled code. Since name shared library file platform dependent, need helper function gives us name: Now module can load compiled code; since code needs executed every time module loaded, goes .on_load hook: … don’t forget unload dynamic library module unloaded:","code":"libname = function (name) {     box::file(paste0(name, .Platform$dynlib.ext)) } .on_load = function (ns) {     ns$dll = dyn.load(libname('hello')) } .on_unload = function (ns) {     dyn.unload(libname('hello')) }"},{"path":"http://klmr.me/box/articles/compiled-code.html","id":"interacting-with-compiled-code","dir":"Articles","previous_headings":"","what":"Interacting with compiled code","title":"Using compiled code","text":"Finally, module needs way calling compiled code. done via R primitive .Call: use code, load module call hello_world function: Note using dll$hello_world causes somewhat costly call getNativeSymbolInfo every time function invoked. undesired, value dll$hello_world stored variable loading module.","code":"#' @export hello_world = function (name) {     .Call(dll$hello_world, name) } box::use(./c) c$hello_world('Rthur') ## [1] \"Hello from C, Rthur!\""},{"path":"http://klmr.me/box/articles/contributing.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Contributing to ‘box’","text":"Compared many R packages, ‘box’ uses somewhat different development workflow: ‘box’ uses ‘devtools’ ‘roxygen2’ generate documentation package infrastructure, generated code data checked version control! means particular project contain NAMESPACE file, since auto-(re)generated tools. Therefore, attempting install current development version ‘box’ via pak::pak('klmr/box') equivalent means fail! Instead, --date, automatically generated build development version ‘box’ installed R-Universe: … corresponding build branch: Alternatively can built manually using instructions .","code":"install.packages('box', repos = 'https://klmr.r-universe.dev') pak::pak('klmr/box@build')"},{"path":[]},{"path":"http://klmr.me/box/articles/contributing.html","id":"building","dir":"Articles","previous_headings":"Development","what":"Building","title":"Contributing to ‘box’","text":"project contains Makefile written GNU Make dialect contains various development utilities. Invoking make without target show list available targets short descriptions. Using Makefile isn’t necessary, helps. particular: make documentation builds NAMESPACE file, shared C library package documentation. make test runs unit tests. make check runs checks, run cleanly submitting pull request: note, make check performs additional checks performed either R CMD check rcmdcheck::rcmdcheck() (checks can found individual scripts scripts/; roughly correspond undocumented checks performed internally CRAN).","code":""},{"path":"http://klmr.me/box/articles/contributing.html","id":"branches","dir":"Articles","previous_headings":"Development","what":"Branches","title":"Contributing to ‘box’","text":"new code developed new branch name prefixed fix/ (bug fixes), feature/ (new features/enhancements), chore/ (contributions: fixed typos, project infrastructure, tests, etc.). Branches pull requests merged main branch.","code":""},{"path":"http://klmr.me/box/articles/contributing.html","id":"code-style","dir":"Articles","previous_headings":"Development","what":"Code style","title":"Contributing to ‘box’","text":"code style ‘box’ similar Tidyverse style guide, several notable differences: file extension R code files lowercase .r (uppercase .R). file extension R Markdown files lowercase .rmd (uppercase .Rmd). Use = assignment, <-. (rare!) occasions assignment inside function call required, use additional parentheses make = syntactically assignment rather named argument passing. <<- banned. Instead name <<- value, use env$name = value, env previously-defined name referring desired target environment. pattern used various places code, good, context-dependent names env ns, self, similar. assign() generally used name assignee statically known. Leave space function following opening parenthesis. Use single quotes, double quotes, around strings. — Even string contains ', escaped. Use four spaces indentation. add extra spaces align assignments named function call arguments. line length hard-limited 120 columns. lines shorter, (soft, otherwise) limit 80 columns. Explicitly use integer literals logical type expression integer.","code":"# GOOD: x = 5  # OK (rarely): if (is.null((x = function_call()))) {}  # BAD: x <- 5 if (is.null(x <- function_call())) {} # GOOD: self = parent.frame() # … later, inside a nested closure: self$x = TRUE  # BAD: x <<- TRUE  # BAD: assign('x', TRUE, envir = caller) # GOOD: f = function () {}  # BAD: f = function() {} # GOOD: 'text' 'text with \\'quotes\\''  # BAD: \"text\" \"text with 'quotes'\" r'(text with 'quotes')' # GOOD: first = 1 second = 2  # BAD: first  = 1 second = 2 # GOOD: if (length(x) == 0L) {}  # BAD: if (length(x) == 0) {}"},{"path":[]},{"path":"http://klmr.me/box/articles/faq.html","id":"can-i-call-libraryrequiresource-inside-a-module","dir":"Articles","previous_headings":"General","what":"Can I call library/require/source inside a module?","title":"Frequently asked questions","text":", usually won’t work: library (require) attaches names globally, rather inside calling module. Inside module, box::use must used instead. Likewise, default source evaluates source code global rather local environment. behaviour can changed setting local argument suitable value. Calling functions inside module raise warning can silenced setting options(box.warn.legacy = FALSE). changing option, ‘box’ needs (unloaded ) reloaded change take effect.","code":""},{"path":"http://klmr.me/box/articles/faq.html","id":"can-i-use-meta-packages-like-tidyverse-with-box","dir":"Articles","previous_headings":"General","what":"Can I use “meta packages” like ‘tidyverse’ with ‘box’?","title":"Frequently asked questions","text":". can use individual packages tidyverse via box::use. directly loading “meta package” ‘tidverse’ intentionally supported. “Meta packages” ‘tidyverse’ antithetical purpose ‘box’: whole point ‘box’ make package imports explicit, limit number names attached current scope. Using “meta packages” undermine therefore discouraged.","code":""},{"path":"http://klmr.me/box/articles/faq.html","id":"how-to-organise-globally-installed-modules","dir":"Articles","previous_headings":"General","what":"How to organise globally installed modules?","title":"Frequently asked questions","text":"Module names need fully qualified, meaning using requires providing name consisting prefix (least one high-level namespace) module’s proper name. choice prefix , extent, arbitrary. However, common conventions worth following. example, common practice use company user name (look code sharing websites GitHub inspiration). project consisting several nested modules might also serve purpose. example, ‘dplyr’ implemented module, common fully qualified name probably tidyverse/dplyr. concrete example, consider following modules, stored module search path: Using sys module (precisely, klmr/sys) requires following R code:","code":"‹box.path› ├── klmr │   ├── fun │   ├── ggplots │   └── sys ├── mschubert │   └── ebits └── … box::use(klmr/sys)"},{"path":[]},{"path":"http://klmr.me/box/articles/faq.html","id":"object-x-not-found-inside-a-module","dir":"Articles","previous_headings":"Common error messages","what":"“object ‘X’ not found” inside a module","title":"Frequently asked questions","text":"Inside modules, ‘base’ package attached. packages need attached, including core R packages otherwise attached default. includes ‘stats’, ‘graphics’, ‘grDevices’, ‘utils’, ‘datasets’ ‘methods’. use names packages, packages need loaded via box::use, third-party packages. Alternatively, standard module r/core can used (, optionally, attached): equivalent using attaching default R packages ‘methods’, ‘stats’, ‘graphics’, ‘grDevices’ ‘utils’, therefore similar state regular R session. module ships ‘box’ always findable.","code":"box::use(r/core[...])"},{"path":"http://klmr.me/box/articles/faq.html","id":"there-is-no-package-called-x-when-running-boxusex-even-though-the-module-x-exists","dir":"Articles","previous_headings":"Common error messages","what":"“there is no package called ‘X’” when running box::use(X), even though the module ‘X’ exists","title":"Frequently asked questions","text":"box::use(name) never attempts load module, always attempts load package called ‘name’, fails package exists. Modules need either local start . .., need fully qualified. means full module name contains least one separator (/). practice, means modules inside global module search path (set via environment variable R_BOX_PATH via getOption('box.path')), modules need located nested folders. See organise globally installed modules? details.","code":""},{"path":"http://klmr.me/box/articles/migration.html","id":"modules-v1-0-box","dir":"Articles","previous_headings":"","what":"‘modules’ “v1.0” == ‘box’","title":"Migration guide","text":"‘box’ spiritual successor ‘modules’ package, forever remain version 0.9.x. However, API ‘box’ intentionally breaks backwards compatibility, module code written use ‘modules’ longer work ‘box’. following guide intended ease migration ‘box’. Migration strongly recommended, since authors believe ‘modules’ conceptual shortcomings fixed ‘box’, keep ecosystem consolidated. time , ‘modules’ receive support () form critical bug fixes.","code":""},{"path":[]},{"path":"http://klmr.me/box/articles/migration.html","id":"general-syntax","dir":"Articles","previous_headings":"Importing modules and packages","what":"General syntax","title":"Migration guide","text":"‘modules’ package, modules packages imported via ‘box’, modules packages imported via box::use: Notably, module package names use declaration ‘box’ unquoted, unevaluated expressions; ‘box’ package never loaded via library. fact, library(box) raises error. Furthermore, ‘box’, module names must fully qualified. equivalent ‘modules’ code mod = import('modname') longer exists. import local module without namespace prefix, instead use box::use return value. Instead, automatically creates alias module/package name calling scope names attached (see ). override alias name, specify named argument: Unlike modules::import, box::use allows (encourages) multiple use declarations :","code":"library(modules)  # …  modname = import('prefix/modname') pkgname = import_package('pkgname') box::use(prefix/modname) box::use(pkgname) box::use(./modname) box::use(mod_alias = prefix/modname) box::use(     prefix/mod1,     mod = prefix/mod2,     pkg )"},{"path":"http://klmr.me/box/articles/migration.html","id":"attaching-names","dir":"Articles","previous_headings":"Importing modules and packages","what":"Attaching names","title":"Migration guide","text":"‘modules’, attach attach_operators parameters controlled names attached. ‘box’, attachment controlled via attach list declarations: Wildcard attach lists also supported: introduce module/package alias attaching names, specify alias name: ‘box’ also allows declaring aliases attached names; feature exist ‘modules’: attach_operators option ‘modules’ dropped. users require operators, need explicitly attach using ‘box’.","code":"# ‘modules’: import('prefix/mod', attach = c('name1', 'name2'))  # ‘box’: box::use(prefix/mod[name1, name2]) # ‘modules’: import('prefix/mod', attach = TRUE)  # ‘box’: box::use(prefix/mod[...]) # ‘modules’: mod = import('prefix/mod', attach = c('name1', 'name2'))  # ‘box’: box::use(mod = prefix/mod[name1, name2]) # Declare alias for one name, attach other name unchanged: box::use(prefix/mod[name_alias = name1, name2])  # Declare alias for two names, attach all other exported names unchanged: box::use(prefix/mod[name_alias1 = name1, name_alias2 = name2, ...])"},{"path":"http://klmr.me/box/articles/migration.html","id":"loading-documentation","dir":"Articles","previous_headings":"Importing modules and packages","what":"Loading documentation","title":"Migration guide","text":"doc option modules::import dropped without replacement. ‘box’ loads documentation lazily requested via box::help (see ).","code":""},{"path":"http://klmr.me/box/articles/migration.html","id":"executing-code-during-module-loading","dir":"Articles","previous_headings":"","what":"Executing code during module loading","title":"Migration guide","text":"‘modules’ package treated modules regular R source code files: upon importing , entire code inside module file executed. ‘box’ conceptually longer . regards module source code declarative: module source code defines number names exported. However, code side-effects module file level longer guaranteed execute. Instead, ‘box’ introduces module event hooks, particular .on_load, function gets executed whenever module first loaded inside R session.","code":""},{"path":"http://klmr.me/box/articles/migration.html","id":"changed-options","dir":"Articles","previous_headings":"","what":"Changed options","title":"Migration guide","text":"‘modules’, module search path set via options('import.path'). ‘box’, use options('box.path') instead. ‘modules’ options options('import.attach') options('warn.conflicts') longer exist. particular, ‘box’ longer warns name conflicts attaching names. Instead, encourages consciously choosing names attach.","code":""},{"path":"http://klmr.me/box/articles/migration.html","id":"changed-function-names","dir":"Articles","previous_headings":"","what":"Changed function names","title":"Migration guide","text":"‘modules’ function module_file now called box::file. semantics also changed: longer cares whether files relative module exist ; merely constructs appropriate path strings. ‘module’ function module_name now called box::name. longer arguments.","code":""},{"path":"http://klmr.me/box/articles/migration.html","id":"exporting-names-from-modules","dir":"Articles","previous_headings":"","what":"Exporting names from modules","title":"Migration guide","text":"‘modules’ packages, module source files exported non-hidden names; , names didn’t start dot (.). ‘box’ makes exporting explicit. default, names exported module, unless marked directive comment #' @export: @export directives decorate box::use declarations apply names declared : code export names pkg_alias, mod, , b c. replaces function export_submodule ‘modules’, longer exists. ’s one exception : module contains declared export, ‘box’ assumes plain R script, treats legacy module. causes ‘box’ revert export behaviour ‘modules’. suppress behaviour (, create module explicitly doesn’t export names), module authors can add following declaration module source code, explicitly declares source file treated module exports:","code":"# This function is not exported: f1 = function () {}  # This nested module is not exported box::use(./nested1)  # This function is exported: #' @export f2 = function () {}  # This nested module is exported #' @export box::use(./nested2) #' @export box::use(     pkg_alias = pkg,     prefix/mod,     prefix/mod2[a, b, c] ) box::export()"},{"path":"http://klmr.me/box/articles/migration.html","id":"accessing-default-packages","dir":"Articles","previous_headings":"","what":"Accessing default packages","title":"Migration guide","text":"‘modules’, module source code “sees” package search path time loaded. , modules implicit access names packages attached module loaded. particular, means legacy modules access names default packages (non-interactive sessions, ’s typically ‘datasets’, ‘utils’, ‘grDevices’, ‘graphics’ ‘stats’; interactive sessions, package ‘methods’ added). ‘box’ modules longer attach packages default, except ‘base’. module needs use functions packages, needs declare explicitly (e.g. via box::use(stats)). users want import default R packages, can import module r/core purpose. following declaration approximates behaviour ‘modules’:","code":"box::use(r/core[...])"},{"path":"http://klmr.me/box/articles/migration.html","id":"loading-parents-of-nested-modules","dir":"Articles","previous_headings":"","what":"Loading parents of nested modules","title":"Migration guide","text":"Consider following file hierarchy defining nested module: ‘modules’, declaration import(/b/c) import module c, first execute code modules /b. words source files /__init__.r, /b/__init__.r, /b/c.r, order. ‘box’ longer loads full module hierarchy: box::use(/b/c) loads module defined /b/c.r. Likewise, box::use(/b) automatically load /b/c.r (behaviour already present ‘modules’).","code":"a ├─ __init__.r ╰─ b    ├─ __init__.r    ╰─ c.r"},{"path":"http://klmr.me/box/articles/migration.html","id":"displaying-documentation","dir":"Articles","previous_headings":"","what":"Displaying documentation","title":"Migration guide","text":"‘modules’ overrode help function ? operator allow displaying module documentation. Since ‘box’ longer attached, functions longer display module documentation. Instead, documentation anything imported via ‘box’ (modules packages!) can queried via box::help. Unlike ‘modules’, ‘box’ also supports displaying documentation nested module names, e.g. box::help($b$c).","code":""},{"path":"http://klmr.me/box/articles/migration.html","id":"cyclic-imports","dir":"Articles","previous_headings":"","what":"Cyclic imports","title":"Migration guide","text":"Cyclic/circular imports supported ‘modules’ ‘box’. However, level support differs. details complicated, generally recommended avoid cyclic modules. However, situations circularity dependencies makes sense, ‘box’ strives make work, technically possible. instance, consider following (nonsensical) working, circular definition functions even odd, determine whether non-negative integer even odd: even.r: odd.r: modules compute even terms odd, vice-versa. Yet ‘box’ trouble importing using modules. However, longer works attempt export imported submodules . , following version odd.r cause error: odd.r:","code":"box::use(./odd[...])  #' @export even = function (n) {     n == 0L || ! odd(n) } box::use(./even[...])  #' @export odd = function (n) {     n != 0L && even(n - 1L) } #' @export box::use(./even[...])  #' @export odd = function (n) {     n != 0L && even(n - 1L) }"},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"The hierarchy of module environments","text":"ensure module environments properly isolates , enable fine-grained control imports exports, loaded modules (well packages loaded via box::use) correspond mesh several interconnected environments. Unfortunately exact relationship environments isn’t trivial, following document aims explaining gist. Fundamentally, module environments follow similar architecture package environments, deviate crucial ways. good explanation package environments, see R Searches Finds Stuff Suraj Gupta, Environments Advanced R Hadley Wickham. following assumes reader passing familiarity concepts. speaking “package environments” following, refers packages handled base R R package namespace functionality. packages loaded box::use, rules modules. Let’s now consider example several loaded modules, interact.","code":""},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"The hierarchy of module environments","text":"example use three modules — minimum number necessary show interactions module environments. Let’s define three modules. ’ll inverse order usage:","code":""},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"c-r","dir":"Articles","previous_headings":"An example","what":"c.r","title":"The hierarchy of module environments","text":"Module c defines exports one name, function f.","code":"#' @export f = function () 'c$f'"},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"b-r","dir":"Articles","previous_headings":"An example","what":"b.r","title":"The hierarchy of module environments","text":"Module b defines exports function f, addition defines function g.","code":"#' @export f = function () 'b$f'  g = function () 'b$g'"},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"a-r","dir":"Articles","previous_headings":"An example","what":"a.r","title":"The hierarchy of module environments","text":"Module imports re-exports names b (changing name b$f g); also imports, re-export, names c (, additionally, defines alias module, exports). defines exports function f defines, export, functions f_of_c1 f_of_c2 (defined identical — hopefully become clear later). Finally, let’s use modules executing following code: Now name defined .GlobalEnv refers module environment module . exported names f g also available .GlobalEnv (defined inside .GlobalEnv). loaded modules can represented following schematic, box corresponding environment:  Let’s go different types environment associated module, connected.","code":"#' @export box::use(./b[g = f, ...])  box::use(./c[...])  #' @export box::use(./c)  #' @export f = function () 'a$f'  f_of_c1 = c$f f_of_c2 = get('f', parent.env(environment())) stopifnot(identical(f_of_c1, f_of_c2)) box::use(a = ./a[f, g])"},{"path":[]},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"module-namespace","dir":"Articles","previous_headings":"Environments","what":"Module namespace","title":"The hierarchy of module environments","text":"Modules loaded dedicated environment, module namespace. Every name defined module defined inside . thus also enclosing environment module’s functions. Lastly, module namespace also stores meta-information module hidden member named .__module__.. corresponds package namespace.","code":""},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"module-imports-environment","dir":"Articles","previous_headings":"Environments","what":"Module imports environment","title":"The hierarchy of module environments","text":"parent environment module namespace imports environment, contains names module imports via attachment declarations box::use expressions. parent environment imports environment R base namespace environment. module imports environment thus corresponds package imports environment.","code":""},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"module-export-environment","dir":"Articles","previous_headings":"Environments","what":"Module export environment","title":"The hierarchy of module environments","text":"module export environment, also called just “module environment” code base, contains names marked exported module. users create module alias box::use call, alias reference environment. Similarly, attached names selected subset module export environment (copied imports environment). direct equivalent environment R packages, R packages distinguish exported names names imported code loaded package. contrast, ‘box’ needs distinguish set exports set names imported (= “attached”) client code.","code":""},{"path":"http://klmr.me/box/articles/mod-env-hierarchy.html","id":"importing-into-other-environments","dir":"Articles","previous_headings":"Environments","what":"Importing into other environments","title":"The hierarchy of module environments","text":"Module import environments store imports one module another. However, modules can also imported inside global environment, inside functions, local execution environment (stack frame). happens, new imports environment created fly, attached importing environment’s parent.env chain. Calling box::use non-empty attach list .GlobalEnv therefore similar calling library. particular, inside .GlobalEnv call box::use(pkg[...]) pretty much equivalent calling library(pkg), discouraged reason library(pkg) discouraged.","code":""},{"path":"http://klmr.me/box/articles/related.html","id":"tools-for-writing-modular-code","dir":"Articles","previous_headings":"","what":"Tools for writing modular code","title":"Similar packages","text":"‘modules’ (relation predecessor ‘box’, also called ‘modules’): Provides modules organizational unit source code. Modules enforce rigorous defining dependencies local search path. can used sub unit within packages scripts. ‘trinker/pysty’: ‘Python’ style packages importing using common forms : import PACKAGE, import PACKAGE ALIAS, PACKAGE import FUN1, FUN2, FUN_N. ‘Shiny’ modules: ‘Shiny’ modules address namespacing problem Shiny UI server logic, adding level abstraction beyond functions. ‘Novartis/tidymodules’: ‘tidymodules’ offers robust framework developing ‘Shiny’ modules based R6 classes facilitates inter-modules communication.","code":""},{"path":"http://klmr.me/box/articles/related.html","id":"tools-for-loading-code","dir":"Articles","previous_headings":"","what":"Tools for loading code","title":"Similar packages","text":"packages listed also provide means loading code; however, won’t replicate . tools subsequently also gained capabilities authoring modular code, since initial primary purpose loading code, ’re instead listed . ‘import’: Alternative mechanism importing objects packages R modules. syntax allows importing multiple objects single command expressive way. import package bridges gap using library (require) direct (single-object) imports. Furthermore imported objects placed current environment. ‘conflicted’: R’s default conflict management system gives recently loaded package precedence. can make hard detect conflicts, particularly arise package update creates ambiguity previously exist. ‘conflicted’ takes different approach, making every conflict error forcing choose function use. ‘pacman’: Tools conveniently perform tasks associated add-packages. pacman conveniently wraps library package related functions names intuitive consistent fashion. seeks combine functionality lower level functions can speed workflow. ‘jonocarroll/importAs’: Import namespaces shorthand symbols rather full package names, python-esque fashion. ‘needs’: simple function easier package loading auto-installation. ‘importar’: Enables ‘Python’-like importing/loading packages functions aliasing prevent namespace conflicts. xfun::pkg_attach(): vectorized version library()","code":""},{"path":"http://klmr.me/box/articles/related.html","id":"tools-for-organising-code","dir":"Articles","previous_headings":"","what":"Tools for organising code","title":"Similar packages","text":"‘RSuite’: Supports safe reproducible solutions development R. help environment separation per project, dependency management, local packages creation preparing deployment packs solutions. (Archived 2024-02-07) ‘mvbutils’: Hierarchical workspace tree, code editing backup, easy package prep, editing packages loaded, per-object lazy-loading, easy documentation, macro functions, miscellaneous utilities.","code":""},{"path":"http://klmr.me/box/articles/testing.html","id":"testing-is-crucial","dir":"Articles","previous_headings":"","what":"Testing is crucial","title":"Testing modules","text":"Writing tests ensure code correctness crucial part developing robust software. especially true dynamic languages R, lack tools ensure correctness statically checked programming languages. ‘box’ dictate specific style testing, different kinds testing appropriate different situations. However, following article suggests structure test accompanying module found work well. Following suggested structure causes implementation tests module located paths next . structure found several conventions across programming languages; differs somewhat convention R packages (implementation code separate directory testing code), differs drastically convention found instance Java. said, possible make Java-like test project work ‘box’, .","code":""},{"path":"http://klmr.me/box/articles/testing.html","id":"support-for-existing-testing-frameworks","dir":"Articles","previous_headings":"","what":"Support for existing testing frameworks","title":"Testing modules","text":"‘box’ agnostic regarding testing framework. following example employs widely used ‘testthat’ unit testing package, frameworks exist, also work. example uses bio/seq module Getting started vignette. enable unit testing, module contains following code end: allows us run tests running module source code command line, e.g. via … inside IDE RStudio choosing menu item “Tools” › “Jobs” › “Start Local Job…” 1. works box::name returns name module function called. function invoked code wasn’t loaded via box::use (case ), value NULL. words, .null(box::name()) way testing whether code currently run loaded module, executed directly. code inside imports __tests__ submodule: ’s put unit tests. name __tests__ convention. ’re free choose different name, recommend sticking convention. Note __tests__ valid R variable name; ’s needs written backticks, .e. qualified local module name ./`__tests__`. case, __tests__ submodule consists directory following contents: __init__.r helper-module.r individual test files __init__.r file corresponds closely file tests/testthat.R standard R package structure. loads ‘testthat’ launches tests: first loads attaches ‘testthat’ package. Although attaching strictly necessary, ‘testthat’ code lot readable without cluttering code explicit name qualifications. Next invokes test_dir passes tests’ directory via box::file inside module’s .on_load hook — remember declarations file level inside module! code execution happen inside functions. helper-module.r file ‘testthat’ helper; sourced automatically ‘testthat’ environment tests run. use mechanism load module test environment: , , attaching isn’t strictly necessary . Note also , depending tests run, helper file might needed, since executing module script file already loads module contents global namespace; however, ways loading tests ; instance, RStudio’s “Start Local Job” doesn’t. helper sometimes necessary, never hurts. set-, actual unit test files look exactly like regular ‘testthat’ test files. instance, ’s __tests__/test-seq.r:","code":"if (is.null(box::name())) {     box::use(./`__tests__`) } Rscript bio/seq.r box::use(testthat[...])  .on_load = function (ns) {     test_dir(box::file()) }  box::export() box::use(../seq[...]) test_that('valid sequences can be created', {     expect_error((s = seq('GATTACA')), NA)     expect_true(is_valid(s))      expect_error(seq('cattaga'), NA) })  test_that('invalid sequences cannot be created', {     expect_error(seq('GATTXA')) })"},{"path":"http://klmr.me/box/articles/testing.html","id":"a-note-on-rstudio-and-other-ides","dir":"Articles","previous_headings":"Support for existing testing frameworks","what":"A note on RStudio and other IDEs","title":"Testing modules","text":"IDEs option “Source” local file. may seem tests correctly run, isn’t actually case! box::use doesn’t reload code already loaded previously; instead, uses already loaded, cached version. means running tests via “Source” button risks running outdated version tests, module, , modifying code. avoid , always execute test module new R session. RStudio, easiest way running job, via menu “Tools” › “Jobs” › “Start Local Job…” (using option “Source Local Job…” “Source” drop-).","code":""},{"path":"http://klmr.me/box/articles/testing.html","id":"test-interfaces-not-implementation-details","dir":"Articles","previous_headings":"","what":"Test interfaces, not implementation details","title":"Testing modules","text":"One big difference testing module code testing package code , testing structure laid , testing code sees module’s public interface, get access internal module implementation.2 design: idea want test observable behaviour rather (purely incidental) current implementation, might changed. way unit testing works many environments, often recommended. realise may always appropriate. Sometimes need test implementation details. essentially two workarounds . moment, yet developed strong preference either methods. Put tests module files . Get access private module namespace testing. loading module box::use, module object attribute namespace holds private module namespace. generally shouldn’t accessed client code, access testing code module entirely legitimate:","code":"# mymod.r  this_works = function () TRUE  if (is.null(box::name())) {     box::use(testthat[...])      # Define tests      test_that('implementation detail X works', {         expect_true(this_works())     })      # Invoke tests      test_file(box::file()) } # __tests__/test-something.r  box::use(../mymod)  impl = attr(mymod, 'namespace')  test_that('implementation detail X works', {     expect_true(impl$this_works()) })"},{"path":"http://klmr.me/box/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Konrad Rudolph. Author, maintainer. Michael Schubert. Contributor.","code":""},{"path":"http://klmr.me/box/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rudolph K (2024). box: Write Reusable, Composable Modular R Code. https://klmr./box/, https://github.com/klmr/box.","code":"@Manual{,   title = {box: Write Reusable, Composable and Modular R Code},   author = {Konrad Rudolph},   year = {2024},   note = {https://klmr.me/box/, https://github.com/klmr/box}, }"},{"path":"http://klmr.me/box/index.html","id":"box-","dir":"","previous_headings":"","what":"‘box’: Write Reusable, Composable and Modular R Code","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"Write Reusable, Composable Modular R Code  Get started Documentation Contributing Frequently asked questions","code":""},{"path":"http://klmr.me/box/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"‘box’ can installed CRAN: Alternatively, current development version can installed R-universe (note installed directly GitHub!):","code":"install.packages('box') install.packages('box', repos = 'https://klmr.r-universe.dev')"},{"path":"http://klmr.me/box/index.html","id":"id_-usage-in-a-nutshell","dir":"","previous_headings":"","what":"🥜 Usage in a nutshell","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"‘box’ allows organising R code modular way, via two mechanisms: enables writing modular code treating files folders R code independent (potentially nested) modules, without requiring user wrap reusable code packages. provides new syntax import reusable code (packages modules) powerful less error-prone library allowing explicit control names import, restricting scope import.","code":""},{"path":"http://klmr.me/box/index.html","id":"reusable-code-modules","dir":"","previous_headings":"🥜 Usage in a nutshell","what":"Reusable code modules","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"Code doesn’t wrapped R package reusable. ‘box’, regular R files reusable R modules can used elsewhere. Just put export directive #' @export front names exported, e.g.: Existing R scripts without @export directives can also used modules. case, names inside file exported, unless start dot (.). modules can stored central module search path (configured via options('box.path')) analogous R package library, locally individual projects. Let’s assume module just defined stored file hello_world.r inside directory mod, inside module search path. following code imports uses : Modules lot like packages. easier write use (often without requiring set-), offer nice features set apart packages (ability nested hierarchically). information writing modules refer Get started vignette.","code":"#' @export hello = function (name) {     message('Hello, ', name, '!') }  #' @export bye = function (name) {     message('Goodbye ', name, '!') } box::use(mod/hello_world)  hello_world$hello('Ross') #> Hello, Ross!"},{"path":"http://klmr.me/box/index.html","id":"loading-code","dir":"","previous_headings":"🥜 Usage in a nutshell","what":"Loading code","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"box::use provides universal import declaration. works packages just well modules. fact, ‘box’ completely replaces base R library require functions. box::use explicit, flexible, less error-prone library. simplest, provides direct replacement: Instead ’d write tells R import ‘ggplot2’ package, make exported names available (.e. “attach” ) — just like library. purpose, ... acts wildcard denote “exported names”. However, attaching everything generally discouraged (hence needs done explicitly rather happening implicitly), since leads name clashes, makes harder retrace names belong packages. Instead, can also instruct box::use attach names loading package — just attach . can tell attach names alias, can also give package alias. following box::use declaration illustrates different cases: Users Python, JavaScript, Rust many programming languages find use declaration familiar (even syntax differs): code imports package ‘purrr’ (attach names); creates alias tbl imported ‘tibble’ package (attach names); imports package ‘dplyr’ additionally attaches names dplyr::filter dplyr::select; attaches exported names ‘stats’, uses local alias st_filter name stats::filter. four packages loaded code , ‘purrr’, ‘tibble’ ‘dplyr’ made available name (purrr, tbl dplyr, respectively), can use exports via $ operator, e.g. purrr$map tbl$glimpse. Although ’ve also loaded ‘stats’, create local name package , attached exported names. Thanks aliases, can safely use functions name multiple packages without conflict: , st_filter refers filter function ‘stats’ package; contrast, plain filter refers ‘dplyr’ function. Alternatively, also explicitly qualify package alias, write dplyr$filter. Furthermore, unlike library, effects box::use restricted current scope: can load attach names inside function, affect calling scope (elsewhere). importing code happens locally, functions load packages longer cause global side effects: makes easy encapsulate code external dependencies without creating unintentional, far-reaching side effects. ‘box’ never loaded via library. Instead, functionality always used explicitly via box::use.","code":"library(ggplot2) box::use(ggplot2[...]) box::use(     purrr,                          # 1     tbl = tibble,                   # 2     dplyr = dplyr[filter, select],  # 3     stats[st_filter = filter, ...]  # 4 ) log = function (msg) {     box::use(glue[glue])     # We can now use `glue` inside the function:     message(glue('[LOG MESSAGE] {msg}')) }  log('test') #> [LOG MESSAGE] test  # … But `glue` remains undefined in the outer scope: glue('test') #> Error in glue(\"test\"): could not find function \"glue\""},{"path":"http://klmr.me/box/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"encounter bug feature request, please post issue report GitHub. general questions, posting Stack Overflow, tagged r-box, also option. Finally, ’s GitHub Discussions board disposal.","code":""},{"path":"http://klmr.me/box/index.html","id":"why-box","dir":"","previous_headings":"","what":"Why ‘box’?","title":"‘box’: Write Reusable, Composable and Modular R Code","text":"‘box’ makes drastically easier write reusable code: instead needing create package, R code file already module can imported using box::use. Modules can also nested inside directories, self-contained projects can easily split separate interdependent submodules. make code reuse scalable larger projects, ‘box’ promotes opposite philosophy ’s common R: notable packages export attach many hundreds , least one notable case, thousand names. works adequately small-ish analysis scripts breaks even moderately large software projects makes non-obvious names imported , increases risk name clashes. make code explicit, readable maintainable, software engineering best practices encourage limiting scope names, well number names available scope. instance, best practice Python never use equivalent library(pkg) (.e. pkg import *). Instead, Python strongly encourages using import pkg pkg import , , symbols, correspond box::use(pkg) box::use(pkg[, , symbols]), respectively. true many languages, e.g. C++, Rust Perl. languages (e.g. JavaScript) even stricter: don’t support unqualified wildcard imports . Zen Python puts rule succinctly: Explicit better implicit.","code":""},{"path":"http://klmr.me/box/reference/add_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend code regions to include leading comments and whitespace — add_comments","title":"Extend code regions to include leading comments and whitespace — add_comments","text":"Extend code regions include leading comments whitespace","code":""},{"path":"http://klmr.me/box/reference/add_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend code regions to include leading comments and whitespace — add_comments","text":"","code":"add_comments(refs)"},{"path":"http://klmr.me/box/reference/add_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend code regions to include leading comments and whitespace — add_comments","text":"refs list code region srcrefs extend.","code":""},{"path":"http://klmr.me/box/reference/add_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend code regions to include leading comments and whitespace — add_comments","text":"add_comment returns list srcrefs corresponding srcref, extended include preceding comment block.","code":""},{"path":"http://klmr.me/box/reference/box.html","id":null,"dir":"Reference","previous_headings":"","what":"An alternative module system for R — box","title":"An alternative module system for R — box","text":"Use box::use(prefix/mod) import module, box::use(pkg) import package. Fully qualified names supported nested modules, reminiscent module systems many modern languages.","code":""},{"path":"http://klmr.me/box/reference/box.html","id":"using-modules-amp-packages","dir":"Reference","previous_headings":"","what":"Using modules & packages","title":"An alternative module system for R — box","text":"box::use","code":""},{"path":"http://klmr.me/box/reference/box.html","id":"writing-modules","dir":"Reference","previous_headings":"","what":"Writing modules","title":"An alternative module system for R — box","text":"Infrastructure utility functions mainly used inside modules. box::file box::name box::register_S3_method mod-hooks","code":""},{"path":"http://klmr.me/box/reference/box.html","id":"interactive-use","dir":"Reference","previous_headings":"","what":"Interactive use","title":"An alternative module system for R — box","text":"Functions use interactive sessions testing. box::help box::unload,      box::reload,      box::purge_cache box::set_script_path box::script_path,      box::set_script_path","code":""},{"path":[]},{"path":"http://klmr.me/box/reference/box.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An alternative module system for R — box","text":"Maintainer: Konrad Rudolph konrad.rudolph@gmail.com (ORCID) contributors: Michael Schubert mschu.dev@gmail.com (ORCID) [contributor]","code":""},{"path":"http://klmr.me/box/reference/create_export_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect export tag information — create_export_block","title":"Collect export tag information — create_export_block","text":"Collect export tag information","code":""},{"path":"http://klmr.me/box/reference/create_export_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect export tag information — create_export_block","text":"","code":"create_export_block(expr, ref, info, mod_ns)  parse_object(info, expr, mod_ns)  roxygen2_object(alias, value, type)"},{"path":"http://klmr.me/box/reference/create_export_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect export tag information — create_export_block","text":"expr unevaluated expression represented tag. ref code reference srcref represented tag. alias object name. value object value. type object type.","code":""},{"path":"http://klmr.me/box/reference/create_export_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect export tag information — create_export_block","text":"create_export_block returns object type roxy_block represents exported declaration expression, along source code location.","code":""},{"path":"http://klmr.me/box/reference/create_export_block.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Collect export tag information — create_export_block","text":"represented much simpler keep compatibility roxygen2 — least time — make integration roxygen2 API easier, become necessary.","code":""},{"path":"http://klmr.me/box/reference/default.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a value or a default — default","title":"Retrieve a value or a default — default","text":"%||% b returns unless empty, case b returned.","code":""},{"path":"http://klmr.me/box/reference/default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a value or a default — default","text":"","code":"a %||% b  lhs %|% rhs"},{"path":"http://klmr.me/box/reference/default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a value or a default — default","text":"value return non-empty b default value lhs vector potentially missing values, NULL rhs vector default values, length lhs unless NULL","code":""},{"path":"http://klmr.me/box/reference/default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a value or a default — default","text":"%||% b returns , unless NULL, empty, FALSE \"\"; case b returned. lhs %|% rhs returns vector length rhs missing values lhs replaced corresponding values rhs.","code":""},{"path":"http://klmr.me/box/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Explicitly declare module exports — export","title":"Explicitly declare module exports — export","text":"box::export explicitly marks source file box module. can used alternative @export tag comment declare module’s exports.","code":""},{"path":"http://klmr.me/box/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explicitly declare module exports — export","text":"","code":"box::export(...)"},{"path":"http://klmr.me/box/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explicitly declare module exports — export","text":"... zero unquoted names exported module.","code":""},{"path":"http://klmr.me/box/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explicitly declare module exports — export","text":"box::export return value. called side effect.","code":""},{"path":"http://klmr.me/box/reference/export.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explicitly declare module exports — export","text":"box::export can called inside module specify module’s exports. module contains call box::export, call overrides declarations made via @export tag comment. module contains multiple calls box::export, union thus defined names exported. module can also contain argument-less call box::export. ensures module export names. Otherwise, module defines names mark exported treated legacy module, default-visible names exported . Default-visible names names starting dot (.). Another use box::export() enable module without exports use module event hooks.","code":""},{"path":"http://klmr.me/box/reference/export.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Explicitly declare module exports — export","text":"preferred way declaring exports via @export tag comment. main purpose box::export explicitly prevent exports, called without arguments.","code":""},{"path":[]},{"path":"http://klmr.me/box/reference/file.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the full paths of files in modules — file","title":"Find the full paths of files in modules — file","text":"Find full paths files modules","code":""},{"path":"http://klmr.me/box/reference/file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the full paths of files in modules — file","text":"","code":"box::file(...)  box::file(..., module)"},{"path":"http://klmr.me/box/reference/file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the full paths of files in modules — file","text":"... character vectors files subdirectories inside module; none given, return root directory module module module environment","code":""},{"path":"http://klmr.me/box/reference/file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the full paths of files in modules — file","text":"character vector containing absolute paths files  specified ....","code":""},{"path":"http://klmr.me/box/reference/file.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find the full paths of files in modules — file","text":"called outside module, current working directory used. function similar system.file packages. semantics differ presence non-existent files: box::file always returns requested paths, even non-existent files; whereas system.file returns empty strings non-existent files, fails (requested via argument mustWork = TRUE).","code":""},{"path":[]},{"path":"http://klmr.me/box/reference/find_in_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a module’s source location — find_in_path","title":"Find a module’s source location — find_in_path","text":"Find module’s source location","code":""},{"path":"http://klmr.me/box/reference/find_in_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a module’s source location — find_in_path","text":"","code":"find_in_path(spec, base_paths)"},{"path":"http://klmr.me/box/reference/find_in_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a module’s source location — find_in_path","text":"spec mod_spec. base_paths character vector paths search module , order preference.","code":""},{"path":"http://klmr.me/box/reference/find_in_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a module’s source location — find_in_path","text":"find_in_path returns mod_info specifies module source location.","code":""},{"path":"http://klmr.me/box/reference/find_in_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find a module’s source location — find_in_path","text":"module physically represented file system either ‹spec_name(spec)›.r ‹spec_name(spec)›/__init__.r, order preference case exist. File extensions case insensitive allow R’s obsession capital-R extensions (lower-case given preference, upper-case file extensions discouraged).","code":""},{"path":"http://klmr.me/box/reference/fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"String formatting helpers — fmt","title":"String formatting helpers — fmt","text":"Interpolate expressions string","code":""},{"path":"http://klmr.me/box/reference/fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String formatting helpers — fmt","text":"","code":"fmt(..., envir = parent.frame())  chr(x)  html_escape(x)  interleave(a, b)"},{"path":"http://klmr.me/box/reference/fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String formatting helpers — fmt","text":"... one unnamed character string arguments, followed optionally named arguments x object convert character vector length n b character vector length n - 1","code":""},{"path":"http://klmr.me/box/reference/fmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String formatting helpers — fmt","text":"fmt(...) concatenates unnamed arguments, interpolates embedded expressions explained ‘Details’. Named arguments treated locally defined variables, added (override, case name reuse) names defined calling scope. chr(x) returns string representation value unevaluated expression x. html_escape(x) returns HTML-escaped version x. interleave(, b) returns vector c([1], b[1], [2], b[2], ..., [n - 1], b[n - 1], [n]).","code":""},{"path":"http://klmr.me/box/reference/fmt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"String formatting helpers — fmt","text":"fmt interpolates embedded expressions string. chr converts value character vector; unlike .character, correctly deparses unevaluated names expressions. interleave helper interleaves two vectors = c([1], ..., [n]) b = c(b[1], ..., b[n - 1]). general format interpolation expression inside fmt string : {...} interpolates expression .... insert literal braces, double (.e. {{, }}). Interpolated expressions can optionally followed format modifier: present, specified via syntax {...;modifier}. following modifiers supported: \\\" like dQuote(...) \\' like sQuote(...) ‹fmt›f like sprintf('%‹fmt›f', ...) Vectors length > 1 concatenated using toString interpolation.","code":""},{"path":"http://klmr.me/box/reference/has_export_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Find @export tags in code regions — has_export_tag","title":"Find @export tags in code regions — has_export_tag","text":"Find @export tags code regions","code":""},{"path":"http://klmr.me/box/reference/has_export_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find @export tags in code regions — has_export_tag","text":"","code":"has_export_tag(ref)"},{"path":"http://klmr.me/box/reference/has_export_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find @export tags in code regions — has_export_tag","text":"ref code region srcref search.","code":""},{"path":"http://klmr.me/box/reference/has_export_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find @export tags in code regions — has_export_tag","text":"TRUE given region annotated @export tag, FALSE otherwise.","code":""},{"path":"http://klmr.me/box/reference/help-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for the help functionality — help-internal","title":"Helper functions for the help functionality — help-internal","text":"help_topic_target parses expression passed help function call find innermost module subset expression . find_env acts similarly find, except looks current environment’s parents rather global environment search list, returns one hit (zero), returns environment rather character string. call_help invokes help() call expression package help topic, finding first help function definition, ignoring one package.","code":""},{"path":"http://klmr.me/box/reference/help-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for the help functionality — help-internal","text":"","code":"help_topic_target(topic, caller)  find_env(name, caller)  call_help(call, caller)"},{"path":"http://klmr.me/box/reference/help-internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for the help functionality — help-internal","text":"topic unevaluated expression passed help. caller environment help called. name name look . call patched help call expression.","code":""},{"path":"http://klmr.me/box/reference/help-internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for the help functionality — help-internal","text":"help_topic_target returns list two elements containing innermost module help call, well name object ’s subject help call. help($b$c$d), returns list(c, quote(d)).","code":""},{"path":"http://klmr.me/box/reference/help.html","id":null,"dir":"Reference","previous_headings":"","what":"Display module documentation — help","title":"Display module documentation — help","text":"box::help displays help module’s objects functions much way help package contents.","code":""},{"path":"http://klmr.me/box/reference/help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display module documentation — help","text":"","code":"box::help(topic, help_type = getOption(\"help_type\", \"text\"))"},{"path":"http://klmr.me/box/reference/help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display module documentation — help","text":"topic either fully-qualified name object function get help , format module$function; name exported attached imported module package. help_type character string specifying output format; currently, 'text' supported.","code":""},{"path":"http://klmr.me/box/reference/help.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display module documentation — help","text":"box::help called side effect called directly command prompt.","code":""},{"path":"http://klmr.me/box/reference/help.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display module documentation — help","text":"See vignette vignette('box', 'box') information displaying help modules.","code":""},{"path":"http://klmr.me/box/reference/importing.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a module or package — importing","title":"Import a module or package — importing","text":"Actual implementation import process","code":""},{"path":"http://klmr.me/box/reference/importing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a module or package — importing","text":"","code":"use_one(declaration, alias, caller, use_call)  load_and_register(spec, info, caller)  register_as_import(spec, info, mod_ns, caller)  defer_import_finalization(spec, info, mod_ns, caller)  finalize_deferred(info)  export_and_attach(spec, info, mod_ns, caller)  load_from_source(info, mod_ns)  load_mod(info)  mod_exports(info, spec, mod_ns)  mod_export_names(info, mod_ns)  attach_to_caller(spec, info, mod_exports, mod_ns, caller)  attach_list(spec, exports)  assign_alias(spec, mod_exports, caller)  assign_temp_alias(spec, caller)"},{"path":"http://klmr.me/box/reference/importing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a module or package — importing","text":"declaration unevaluated use declaration expression without surrounding use call alias use alias, given, otherwise NULL caller client’s calling environment (parent frame) use_call use call invoking code spec module use declaration specification info physical module information mod_ns module namespace environment newly loaded module","code":""},{"path":"http://klmr.me/box/reference/importing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a module or package — importing","text":"use_one currently return value. — might change future. load_mod returns module package namespace environment specified module package info. mod_exports returns export environment containing exported names given module. mode_export_names returns vector containing names names(mod_exports(info, spec, mod_ns)) create export environment. attach_list returns named character vector names attach specification. vector’s names aliases, provided, attach specification names otherwise.","code":""},{"path":"http://klmr.me/box/reference/importing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a module or package — importing","text":"use_one performs actual import. invoked use given calling context unevaluated expressions arguments, uses standard evaluation. load_and_register performs loading, attaching exporting module identified spec info. register_as_import registers use declaration calling module can found later , declaration reexported calling module. defer_import_finalization called load_and_register earmark module deferred initialization hasn’t fully loaded yet. finalize_deferred exports attaches names module use declaration deferred due part cyclic loading chain. export_and_attach exports attaches names given module use declaration. load_from_source loads module source file newly created, empty module namespace. load_mod tests whether module package already loaded , , loads . mod_exports returns export environment containing copy module’s exported objects. attach_to_caller attaches listed names attach specification given use declaration calling environment. assign_alias creates module/package object calling environment, unless contains attach declaration, explicit alias given. assign_temp_alias creates placeholder object module calling environment, replaced actual module export environment module completely loaded (happens case cyclic imports).","code":""},{"path":"http://klmr.me/box/reference/importing.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import a module or package — importing","text":"module still loaded (part cyclic import chain), load_and_register earmarks module deferred registration holds attaching exporting now, since names available yet.","code":""},{"path":"http://klmr.me/box/reference/info.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about a physical module or package — info","title":"Information about a physical module or package — info","text":"mod_info represents existing, installed module runtime physical location (usually file system).","code":""},{"path":"http://klmr.me/box/reference/info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about a physical module or package — info","text":"","code":"mod_info(spec, source_path)  pkg_info(spec)"},{"path":"http://klmr.me/box/reference/info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information about a physical module or package — info","text":"spec mod_spec pkg_spec (mod_info pkg_info, respectively) source_path character string full path physical module location.","code":""},{"path":"http://klmr.me/box/reference/info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information about a physical module or package — info","text":"mod_info pkg_info return structure representing module/package information given specification/source location.","code":""},{"path":"http://klmr.me/box/reference/loaded.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment of loaded modules — loaded","title":"Environment of loaded modules — loaded","text":"module stored environment inside loaded_mods module’s code location path identifier. path rather module name used module names unique: two modules called can exist nested inside modules b c, respectively. Yet may loaded time need distinguished.","code":""},{"path":"http://klmr.me/box/reference/loaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment of loaded modules — loaded","text":"","code":"loaded_mods  is_mod_loaded(info)  register_mod(info, mod_ns)  deregister_mod(info)  loaded_mod(info)  is_mod_still_loading(info)  mod_loading_finished(info, mod_ns)"},{"path":"http://klmr.me/box/reference/loaded.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Environment of loaded modules — loaded","text":"loaded_mods environment loaded module package namespaces.","code":""},{"path":"http://klmr.me/box/reference/loaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environment of loaded modules — loaded","text":"info mod info module mod_ns module namespace environment","code":""},{"path":"http://klmr.me/box/reference/loaded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environment of loaded modules — loaded","text":"is_mod_loaded tests whether module already loaded. register_mod caches module namespace marks module loaded. deregister_mod removes module namespace cache, unloading module memory. loaded_mod retrieves loaded module namespace given info. is_mod_still_loading tests whether module still loaded. mod_loading_finished signals module completely loaded.","code":""},{"path":"http://klmr.me/box/reference/loaded.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Environment of loaded modules — loaded","text":"is_mod_still_loading mod_loading_finished used break cycles loading modules cyclic dependencies.","code":""},{"path":"http://klmr.me/box/reference/lsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list of function names in an environment — lsf","title":"Return a list of function names in an environment — lsf","text":"Return list function names environment","code":""},{"path":"http://klmr.me/box/reference/lsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list of function names in an environment — lsf","text":"","code":"lsf(envir)"},{"path":"http://klmr.me/box/reference/lsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list of function names in an environment — lsf","text":"envir environment search .","code":""},{"path":"http://klmr.me/box/reference/lsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list of function names in an environment — lsf","text":"lsf returns vector function names given environment.","code":""},{"path":"http://klmr.me/box/reference/map.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply function to elements in list — map","title":"Apply function to elements in list — map","text":"map applies function lists arguments, similar Map base R, argument USE.NAMES set FALSE. flatmap performs recursive map: return type always vector type given .default, return value calling .f vector, flattened enclosing vector (see ‘Examples’). transpose special map application concatenates inputs compute transposed list.","code":""},{"path":"http://klmr.me/box/reference/map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply function to elements in list — map","text":"","code":"map(.f, ...)  flatmap(.f, ..., .default)  flatmap_chr(.f, ...)  vmap(.f, .x, ..., .default)  map_int(.f, ...)  map_lgl(.f, ...)  map_chr(.f, ...)  transpose(...)"},{"path":"http://klmr.me/box/reference/map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply function to elements in list — map","text":".f n-ary function n number arguments given ... lists arguments map parallel .default default value returned flatmap empty input","code":""},{"path":"http://klmr.me/box/reference/map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply function to elements in list — map","text":"map returns (potentially nested) list values resulting applying .f arguments. flatmap returns vector type given .default, .default, input empty. transpose returns list element-wise concatenated input vectors; , “transposed list” elements.","code":""},{"path":"http://klmr.me/box/reference/map.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply function to elements in list — map","text":"","code":"flatmap_chr(identity, NULL) # character(0)  flatmap_chr(identity, c('a', 'b')) # [1] \"a\" \"b\"  flatmap_chr(identity, list(c('a', 'b'), 'c')) # [1] \"a\" \"b\" \"c\"  transpose(1 : 2, 3 : 4) # [[1]] # [1] 1 3 # # [[2]] # [1] 2 4"},{"path":"http://klmr.me/box/reference/mod-hooks.html","id":null,"dir":"Reference","previous_headings":"","what":"Hooks for module events — mod-hooks","title":"Hooks for module events — mod-hooks","text":"Modules can declare functions called module first loaded.","code":""},{"path":"http://klmr.me/box/reference/mod-hooks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hooks for module events — mod-hooks","text":"","code":".on_load(ns)  .on_unload(ns)"},{"path":"http://klmr.me/box/reference/mod-hooks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hooks for module events — mod-hooks","text":"ns module namespace environment","code":""},{"path":"http://klmr.me/box/reference/mod-hooks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hooks for module events — mod-hooks","text":"return values hook functions ignored.","code":""},{"path":"http://klmr.me/box/reference/mod-hooks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hooks for module events — mod-hooks","text":"create module hooks, modules define function specified name signature. Module hooks exported. .on_load called, unlocked module namespace environment passed via parameter ns. means code .on_load permitted modify namespace adding names , replacing names , removing names namespace. .on_unload called modules unloaded. (locked) module namespace passed argument. primarily useful clean resources used module. Note , packages, .on_unload necessarily called R shut . Legacy modules use hooks. use hooks, module needs contain export specification (module export names, specify explicit, empty export list via box::export().","code":""},{"path":"http://klmr.me/box/reference/mod-hooks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Hooks for module events — mod-hooks","text":"API hook functions still subject change. particular, might future way subscribe module events modules packages, equivalently R package userhooks.","code":""},{"path":"http://klmr.me/box/reference/name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a module’s name — name","title":"Get a module’s name — name","text":"Get module’s name","code":""},{"path":"http://klmr.me/box/reference/name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a module’s name — name","text":"","code":"box::name()"},{"path":"http://klmr.me/box/reference/name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a module’s name — name","text":"box::name returns character string containing name module, NULL called outside module.","code":""},{"path":"http://klmr.me/box/reference/name.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get a module’s name — name","text":"function returns NULL invoked inside module, function can used check whether code imported module called directly.","code":""},{"path":"http://klmr.me/box/reference/namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Module namespace handling — namespace","title":"Module namespace handling — namespace","text":"make_namespace creates new module namespace.","code":""},{"path":"http://klmr.me/box/reference/namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module namespace handling — namespace","text":"","code":"make_namespace(info)  is_namespace(env)  namespace_info(ns, which, default = NULL)  namespace_info(ns, which) <- value  mod_topenv(env = parent.frame())  is_mod_topenv(env)"},{"path":"http://klmr.me/box/reference/namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module namespace handling — namespace","text":"info module info. env environment may module namespace. ns module namespace environment. key (length 1 character string) info get/set. default default value use key set. value value assign specified key.","code":""},{"path":"http://klmr.me/box/reference/namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Module namespace handling — namespace","text":"make_namespace returns newly created module namespace module described info.","code":""},{"path":"http://klmr.me/box/reference/namespace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Module namespace handling — namespace","text":"namespace contains module’s content. schema much like R package organisation. good resource : <http://obeautifulcode.com/R/-R-Searches--Finds-Stuff/>","code":""},{"path":"http://klmr.me/box/reference/namespace.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Module namespace handling — namespace","text":"Module namespaces aren’t actual R package namespaces. intentional, since R makes strong assumptions package namespaces violated . particular, namespaces registered R’s internal namespace registry, (de)serialisation handled R code assumes belong actual packges can loaded via `loadNamespace`.","code":""},{"path":"http://klmr.me/box/reference/parse_documentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a module’s documentation — parse_documentation","title":"Parse a module’s documentation — parse_documentation","text":"Parse module’s documentation","code":""},{"path":"http://klmr.me/box/reference/parse_documentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a module’s documentation — parse_documentation","text":"","code":"parse_documentation(info, mod_ns)  parse_roxygen_tags(info, mod_ns)  patch_mod_doc(docs)"},{"path":"http://klmr.me/box/reference/parse_documentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a module’s documentation — parse_documentation","text":"info module info. mod_ns module namespace. docs list roxygen2 documentation objects.","code":""},{"path":"http://klmr.me/box/reference/parse_documentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a module’s documentation — parse_documentation","text":"parse_documentation returns list character strings Rd documentation source code documented name module.","code":""},{"path":"http://klmr.me/box/reference/parse_export_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find exported names in parsed module source — parse_export_specs","title":"Find exported names in parsed module source — parse_export_specs","text":"Find exported names parsed module source","code":""},{"path":"http://klmr.me/box/reference/parse_export_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find exported names in parsed module source — parse_export_specs","text":"","code":"parse_export_specs(info, exprs, mod_ns)  use_call  static_assign_calls  assign_calls  is_static_assign_call(call)  is_assign_call(call)  block_is_assign(block)  block_is_use_call(block)  block_is_exported(block)  block_name(block)"},{"path":"http://klmr.me/box/reference/parse_export_specs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Find exported names in parsed module source — parse_export_specs","text":"object class call length 3. object class list length 4. object class list length 6.","code":""},{"path":"http://klmr.me/box/reference/parse_export_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find exported names in parsed module source — parse_export_specs","text":"info module info. exprs list expressions parsed module. mod_ns module namespace evaluating expressions. call call test. block roxygen2 block inspect.","code":""},{"path":"http://klmr.me/box/reference/parse_export_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find exported names in parsed module source — parse_export_specs","text":"parse_export_specs returns potentially empty character vector exported names.","code":""},{"path":"http://klmr.me/box/reference/parse_export_specs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find exported names in parsed module source — parse_export_specs","text":"two situations @export tag can applied: applied assignments, assigned name exported. applied box::use call, imported names     exported. can module name , attached names,     . names introduced box::use call exported. See     use rules governing names introduced     scope, thus exported. situation, applying @export tag error.","code":""},{"path":"http://klmr.me/box/reference/parse_export_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract comment tags from Roxygen block comments — parse_export_tags","title":"Extract comment tags from Roxygen block comments — parse_export_tags","text":"Extract comment tags Roxygen block comments","code":""},{"path":"http://klmr.me/box/reference/parse_export_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract comment tags from Roxygen block comments — parse_export_tags","text":"","code":"parse_export_tags(info, exprs, mod_ns)"},{"path":"http://klmr.me/box/reference/parse_export_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract comment tags from Roxygen block comments — parse_export_tags","text":"exprs unevaluated expressions parse.","code":""},{"path":"http://klmr.me/box/reference/parse_export_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract comment tags from Roxygen block comments — parse_export_tags","text":"parse_export_tags returns list roxy_blocks exported declarations.","code":""},{"path":"http://klmr.me/box/reference/parse_export_tags.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract comment tags from Roxygen block comments — parse_export_tags","text":"following code performs function roxygen2 custom @ tag roclet. Unfortunately roxygen2 pulls many dependencies, making less suitable infrastructure package one. Furthermore, code license roxygen2 incompatible , simply copy paste relevant code . Luckily logic straightforward reimplement.","code":""},{"path":"http://klmr.me/box/reference/path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a module’s path — path","title":"Get a module’s path — path","text":"following functions retrieve information path directory module script running .","code":""},{"path":"http://klmr.me/box/reference/path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a module’s path — path","text":"","code":"path(mod)  base_path(mod)  module_path(mod)  mod_path(mod)  explicit_path(...)  r_path(...)  knitr_path(...)  shiny_path(...)  testthat_path(...)  rstudio_path(...)  wd_path(...)"},{"path":"http://klmr.me/box/reference/path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a module’s path — path","text":"mod module environment namespace","code":""},{"path":"http://klmr.me/box/reference/path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a module’s path — path","text":"path returns character string containing module’s full path. base_path returns character string containing module’s base directory, current working directory invoked module. module_path returns character string contains directory calling R code run. See ‘Details’. mod_path returns script path associated box module explicit_path returns script path explicitly set user, path set. r_path returns directory current script run via Rscript, R CMD BATCH R -f. knitr_path returns directory currently knit document run, NULL called within knitr document. shiny_path returns directory Shiny application running, NULL called within Shiny application. testthat_path returns directory testthat code executed, NULL called within testthat test case. rstdio_path returns directory currently active RStudio script file saved. wd_path returns current working directory.","code":""},{"path":"http://klmr.me/box/reference/path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a module’s path — path","text":"module_path takes best guess script’s path, since R provide sure-fire way determining path currently executing code. following calling situations covered: Path explicitly set via set_script_path Path running document/application (knitr, Shiny) Path unit test cases (testthat) Path currently opened source code file RStudio Code invoked Rscript script.r Code invoked R CMD BATCH script.r Code invoked R -f script.r Script run interactively (use getwd())","code":""},{"path":"http://klmr.me/box/reference/paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Path related functions — paths","title":"Path related functions — paths","text":"mod_search_path returns character vector paths module code can located found box.","code":""},{"path":"http://klmr.me/box/reference/paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path related functions — paths","text":"","code":"mod_search_path(caller)  calling_mod_path(caller)  split_path(path)  merge_path(components)  sanitize_path_fragment(path)"},{"path":"http://klmr.me/box/reference/paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Path related functions — paths","text":"caller environment box::use invoked. path path components character string vector path components merge","code":""},{"path":"http://klmr.me/box/reference/paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path related functions — paths","text":"calling_mod_path path source module calling box::use, script’s path calling code module. split_path returns character vector path components logically represent path. merge_path returns single character string logically equivalent path passed split_path. logically represent path.","code":""},{"path":"http://klmr.me/box/reference/paths.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Path related functions — paths","text":"search paths ordered highest lowest priority. current module’s path always lowest priority. two ways modifying module search path: default, getOption('box.path') specifies search path character vector. Users can override value separately setting environment variable R_BOX_PATH one paths, separated platform’s path separator (“:” UNIX-like systems, “;” Windows). merge_path inverse function split_path. However, mean result identical original path. Instead, guaranteed refer logical path given working directory.","code":""},{"path":"http://klmr.me/box/reference/register_S3_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Register S3 methods — register_S3_method","title":"Register S3 methods — register_S3_method","text":"box::register_S3_method makes S3 method given generic class known inside module.","code":""},{"path":"http://klmr.me/box/reference/register_S3_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register S3 methods — register_S3_method","text":"","code":"box::register_S3_method(name, class, method)"},{"path":"http://klmr.me/box/reference/register_S3_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register S3 methods — register_S3_method","text":"name name generic character string. class class name. method method register (optional).","code":""},{"path":"http://klmr.me/box/reference/register_S3_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register S3 methods — register_S3_method","text":"box::register_S3_method called side effect.","code":""},{"path":"http://klmr.me/box/reference/register_S3_method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register S3 methods — register_S3_method","text":"method missing, defaults function named name.class calling module. function exists, error raised. Methods generics defined module need registered explicitly, indeed registered. However, user wants add method known generic (defined outside module, e.g. print), needs made known explicitly. See vignette vignette('box', 'box') information defining S3 methods inside modules.","code":""},{"path":"http://klmr.me/box/reference/register_S3_method.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Register S3 methods — register_S3_method","text":"call registerS3method inside module, use box::register_S3_method. important module’s book-keeping.","code":""},{"path":"http://klmr.me/box/reference/s3.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal S3 infrastructure helpers — s3","title":"Internal S3 infrastructure helpers — s3","text":"following internal S3 infrastructure helper functions.","code":""},{"path":"http://klmr.me/box/reference/s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal S3 infrastructure helpers — s3","text":"","code":"is_S3_user_generic(function_name, envir = parent.frame())  make_S3_methods_known(module)"},{"path":"http://klmr.me/box/reference/s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal S3 infrastructure helpers — s3","text":"function_name function name character string. envir environment function invoked . module module object register S3 methods","code":""},{"path":"http://klmr.me/box/reference/s3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal S3 infrastructure helpers — s3","text":"is_S3_user_generic returns TRUE specified function user-defined S3 generic, FALSE otherwise.","code":""},{"path":"http://klmr.me/box/reference/s3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal S3 infrastructure helpers — s3","text":"is_S3_user_generic checks whether function given name user-defined generic. user-defined generic function , point, calls UseMethod. make_S3_methods_known finds registers S3 methods inside module.","code":""},{"path":"http://klmr.me/box/reference/script_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the base path of the script — script_path","title":"Set the base path of the script — script_path","text":"box::set_script_path(path) explicitly tells box path given script called; box::script_path() returns previously set path.","code":""},{"path":"http://klmr.me/box/reference/script_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the base path of the script — script_path","text":"","code":"box::set_script_path(path)  box::script_path()"},{"path":"http://klmr.me/box/reference/script_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the base path of the script — script_path","text":"path character string containing relative absolute path currently executing R code file, NULL reset path.","code":""},{"path":"http://klmr.me/box/reference/script_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the base path of the script — script_path","text":"box::script_path box::set_script_path return previously set script path, NULL none explicitly set. box::set_script_path returns value invisibly.","code":""},{"path":"http://klmr.me/box/reference/script_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the base path of the script — script_path","text":"box needs know base path topmost calling R context (.e. script) find relative import locations. cases, box can figure path automatically. However, cases third-party packages load code way box find correct path script . box::set_script_path can used cases set path currently executing R script manually.","code":""},{"path":"http://klmr.me/box/reference/script_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set the base path of the script — script_path","text":"box able figure script path automatically. Using box::set_script_path therefore never necessary. Please file issue encounter situation necessitates using box::set_script_path!","code":""},{"path":"http://klmr.me/box/reference/script_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the base path of the script — script_path","text":"","code":"box::set_script_path('scripts/my_script.r')"},{"path":"http://klmr.me/box/reference/spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a mod or pkg spec expression passed to use — spec","title":"Parse a mod or pkg spec expression passed to use — spec","text":"Parse mod pkg spec expression passed use","code":""},{"path":"http://klmr.me/box/reference/spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a mod or pkg spec expression passed to use — spec","text":"","code":"parse_spec(expr, alias)  mod_spec(spec, ...)  pkg_spec(spec, ...)  spec_name(spec)"},{"path":"http://klmr.me/box/reference/spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a mod or pkg spec expression passed to use — spec","text":"expr mod pkg spec expression parse alias mod pkg spec alias character, NULL spec named list information parser constructed given spec expression ... information spec, represented spec expression parse tree","code":""},{"path":"http://klmr.me/box/reference/spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a mod or pkg spec expression passed to use — spec","text":"parse_spec returns named list contains information parsed mod specification. Currently contains: name module package name prefix prefix, spec module attach named vector symbols attach,      TRUE attach symbols, NULL attach nothing alias module package alias explicit logical value indicating whether caller      provided explicit alias","code":""},{"path":"http://klmr.me/box/reference/throw.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw informative error messages — throw","title":"Throw informative error messages — throw","text":"Helpers generate readable informative error messages package users.","code":""},{"path":"http://klmr.me/box/reference/throw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw informative error messages — throw","text":"","code":"throw(..., call = sys.call(sys.parent()), subclass = NULL)  rethrow(error, call = sys.call(sys.parent()))  rethrow_on_error(expr, call = sys.call(sys.parent()))  box_error(message, call = NULL, subclass = NULL)"},{"path":"http://klmr.me/box/reference/throw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw informative error messages — throw","text":"... arguments passed fmt call calling context error raised subclass optional subclass name error condition raised error object class c(\"error\", \"condition\") rethrow expr expression evaluate inside tryCatch message error message","code":""},{"path":"http://klmr.me/box/reference/throw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Throw informative error messages — throw","text":"throw error, rethrow_on_error returns value evaluating expr. box_error returns new ‘box’ error condition object given message call, optionally given subclass type.","code":""},{"path":"http://klmr.me/box/reference/throw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Throw informative error messages — throw","text":"rethrow, call argument overrides rethrown error’s stored call.","code":""},{"path":"http://klmr.me/box/reference/topenv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a module’s namespace environment — topenv","title":"Get a module’s namespace environment — topenv","text":"Called inside module, box::topenv() returns module namespace environment. Otherwise, behaves similarly topenv.","code":""},{"path":"http://klmr.me/box/reference/topenv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a module’s namespace environment — topenv","text":"","code":"box::topenv()  box::topenv(env)"},{"path":"http://klmr.me/box/reference/topenv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a module’s namespace environment — topenv","text":"module module environment","code":""},{"path":"http://klmr.me/box/reference/topenv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a module’s namespace environment — topenv","text":"box::topenv() returns top-level module environment module called , nearest top-level non-module environment otherwise; usually .GlobalEnv. box::topenv(env) returns nearest top-level environment direct indirect parent env.","code":""},{"path":"http://klmr.me/box/reference/unload.html","id":null,"dir":"Reference","previous_headings":"","what":"Unload or reload modules — unload","title":"Unload or reload modules — unload","text":"Given module previously loaded assigned alias mod, box::unload(mod) unloads ; box::reload(mod) unloads reloads source. box::purge_cache() marks modules unloaded.","code":""},{"path":"http://klmr.me/box/reference/unload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unload or reload modules — unload","text":"","code":"box::unload(mod)  box::reload(mod)  box::purge_cache()"},{"path":"http://klmr.me/box/reference/unload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unload or reload modules — unload","text":"mod module object unloaded reloaded","code":""},{"path":"http://klmr.me/box/reference/unload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unload or reload modules — unload","text":"functions called side effect. return anything.","code":""},{"path":"http://klmr.me/box/reference/unload.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unload or reload modules — unload","text":"Unloading module causes removed internal cache next subsequent box::use declaration reload module source. box::reload unloads reloads specified modules transitive module dependencies. box::reload merely shortcut calling box::unload followed box::use, box::unload unloads specified module , dependent modules.","code":""},{"path":"http://klmr.me/box/reference/unload.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Unload or reload modules — unload","text":"references loaded modules remain unchanged, (usually) still work. Unloading reloading modules primarily useful testing development, used production code: particular, unloading may break module references .on_unload hook unloaded binary shared libraries still referenced. functions come restrictions. box::unload attempts detach names attached corresponding box::use call. box::reload attempts re-attach names. works corresponding box::use declaration located scope. box::purge_cache removes internal cache modules, actually invalidate module references names attached loaded modules. box::unload execute .on_unload hook module, exists. box::reload re-execute .on_load hook module dependent modules loading (executing corresponding .on_unload hooks unloading). box::purge_cache execute existing .on_unload hooks loaded modules.","code":""},{"path":[]},{"path":"http://klmr.me/box/reference/use.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a module or package — use","title":"Import a module or package — use","text":"box::use imports one modules /packages, makes available calling environment.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a module or package — use","text":"","code":"box::use(prefix/mod, ...)  box::use(pkg, ...)  box::use(alias = prefix/mod, ...)  box::use(alias = pkg, ...)  box::use(prefix/mod[attach_list], ...)  box::use(pkg[attach_list], ...)"},{"path":"http://klmr.me/box/reference/use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a module or package — use","text":"... import declarations prefix/mod qualified module name pkg package name alias alias name attach_list list names attached, optionally witha aliases form alias = name; special placeholder name ...","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a module or package — use","text":"box::use return value. called side effect.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a module or package — use","text":"box::use(...) specifies list one import declarations, given individual arguments box::use, separated comma. box::use permits using trailing comma last import declaration. import declaration takes one following forms: prefix/mod: Import module given qualified module name      prefix/mod make available locally using      name mod. prefix can nested      name allow importing specific submodules. Local imports can      specified via prefixes starting . ..,      override search path use local path instead. See      ‘Search path’ details. pkg: Import package pkg make available locally using      package name. alias = prefix/mod alias = pkg: Import module package, make available locally using name      alias instead regular module package name. prefix/mod[attach_list] pkg[attach_list]: Import module package attach exported symbols listed      attach_list locally. declaration make      module/package available locally. override , provide      alias, , use alias =      prefix/mod[attach_list] alias =      pkg[attach_list]. attach_list comma-separated list names,      optionally aliases assigned via alias = name. list can      also contain special symbol ..., causes      exported names module/package imported. See vignette vignette('box', 'box') detailed examples different types use declarations listed .","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"import-semantics","dir":"Reference","previous_headings":"","what":"Import semantics","title":"Import a module or package — use","text":"Modules packages loaded dedicated namespace environments. Names module package can selectively attached current scope shown . Unlike library, attaching happens locally, .e. caller’s environment: box::use executed global environment, effect . Otherwise, effect importing attaching module package limited caller’s local scope (environment()). used inside module module scope, newly imported module available inside module’s scope, outside (modules might loaded). Member access (non-attached) exported names modules packages happens via $ operator. operator perform partial argument matching, contrast behavior $ operator base R, matches partial names. Note replacement functions (.e. functions form fun<-) must attached usable, R syntactically allow assignment calls left-hand side assignment contains $.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"export-specification","dir":"Reference","previous_headings":"","what":"Export specification","title":"Import a module or package — use","text":"Names defined modules can marked exported prefixing @export tag comment; , name needs immediately prefixed comment reads, verbatim, #' @export. line may optionally part roxygen2 documentation name. Alternatively, exports may specified via box::export function, using declarative @export tags generally preferred. module declared exports treated legacy module exports default-visible names (, names start dot (.). usage present backwards compatibility plain R scripts, usage recommended writing new modules. define module exports names, call box::export() without arguments. prevents module treated legacy module.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"search-path","dir":"Reference","previous_headings":"","what":"Search path","title":"Import a module or package — use","text":"Modules searched module search path, given getOption('box.path'). character vector paths search, highest lowest priority. current directory always considered last. , file /b.r exists locally current directory module search path, local file .//b.r loaded, unless import explicitly declared box::use(.//b). Modules module search path must organised subfolders, must imported fully qualified. Keep mind box::use(name) never attempt load module; always attempts load package. common module organisation project, company user name; instance, fully qualified module names mirror repository names source code sharing websites (GitHub). Given declaration box::use(/b) search path p, file p//b.r exist, box alternatively looks nested file p//b/__init__r load. Module path names case sensitive (even case insensitive file systems), file extension can spelled either .r .R (exist, .r given preference). module search path can overridden environment variable R_BOX_PATH. set, may consist one search paths, separated platform’s path separator (.e. ; Windows, : platforms). Deprecation warning: next major version, box read environment variables , package load time. Modifying value R_BOX_PATH afterwards effect, unless package unloaded reloaded. current directory context-dependent: inside module, directory corresponds module’s directory. Inside R code file invoked command line, corresponds directory containing file. code running inside Shiny application knitr document, directory execution used. Otherwise (e.g. interactive R session), current working directory given getwd() used. Local import declarations (, module prefixes start ./ ../) never use search path find module. Instead, current module’s directory (./) parent module’s directory (../) looked . ../ can nested: ../../ denotes grandparent module, etc.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"s-support","dir":"Reference","previous_headings":"","what":"S3 support","title":"Import a module or package — use","text":"Modules can contain S3 generics methods. override known generics (= defined outside module), methods inside module need registered using box::register_S3_method. See documentation details.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"module-names","dir":"Reference","previous_headings":"","what":"Module names","title":"Import a module or package — use","text":"module’s full name consists one R names separated /. Since box::use declarations contain R expressions, names need valid R names. Non-syntactic names need wrapped backticks; see Quotes. Furthermore, since module names usually correspond file folder names, consist valid path name characters ensure portability.","code":""},{"path":"http://klmr.me/box/reference/use.html","id":"encoding","dir":"Reference","previous_headings":"","what":"Encoding","title":"Import a module or package — use","text":"module source code files assumed UTF-8 encoded.","code":""},{"path":[]},{"path":"http://klmr.me/box/reference/use.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a module or package — use","text":"","code":"# Set the module search path for the example module. old_opts = options(box.path = system.file(package = 'box'))  # Basic usage # The file `mod/hello_world.r` exports the functions `hello` and `bye`. box::use(mod/hello_world) hello_world$hello('Robert') #> Hello, Robert! hello_world$bye('Robert') #> Goodbye Robert!  # Using an alias box::use(world = mod/hello_world) world$hello('John') #> Hello, John!  # Attaching exported names box::use(mod/hello_world[hello]) hello('Jenny') #> Hello, Jenny! # Exported but not attached, thus access fails: try(bye('Jenny')) #> Error in bye(\"Jenny\") : could not find function \"bye\"  # Attach everything, give `hello` an alias: box::use(mod/hello_world[hi = hello, ...]) hi('Eve') #> Hello, Eve! bye('Eve') #> Goodbye Eve!  # Reset the module search path on.exit(options(old_opts))  if (FALSE) { # The following code illustrates different import declaration syntaxes # inside a single `box::use` declaration:  box::use(     global/mod,     mod2 = ./local/mod,     purrr,     tbl = tibble,     dplyr = dplyr[filter, select],     stats[st_filter = filter, ...], )  # This declaration makes the following names available in the caller’s scope: # # 1. `mod`, which refers to the module environment for  `global/mod` # 2. `mod2`, which refers to the module environment for `./local/mod` # 3. `purrr`, which refers to the package environment for ‘purrr’ # 4. `tbl`, which refers to the package environment for ‘tibble’ # 5. `dplyr`, which refers to the package environment for ‘dplyr’ # 6. `filter` and `select`, which refer to the names exported by ‘dplyr’ # 7. `st_filter`, which refers to `stats::filter` # 8. all other exported names from the ‘stats’ package }"},{"path":"http://klmr.me/box/reference/wrap_unsafe_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap “unsafe calls” functions — wrap_unsafe_function","title":"Wrap “unsafe calls” functions — wrap_unsafe_function","text":"wrap_unsafe_function declares function wrapper function causes R CMD check NOTE called directly. usually call functions, need want explicitly support features provide.","code":""},{"path":"http://klmr.me/box/reference/wrap_unsafe_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap “unsafe calls” functions — wrap_unsafe_function","text":"","code":"wrap_unsafe_function(ns, name)"},{"path":"http://klmr.me/box/reference/wrap_unsafe_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap “unsafe calls” functions — wrap_unsafe_function","text":"ns namespace unsafe function. name name unsafe function.","code":""},{"path":"http://klmr.me/box/reference/wrap_unsafe_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap “unsafe calls” functions — wrap_unsafe_function","text":"wrap_unsafe_calls returns wrapper function argument wrapped function can called without causing NOTE.","code":""},{"path":"http://klmr.me/box/reference/wrap_unsafe_function.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Wrap “unsafe calls” functions — wrap_unsafe_function","text":"Using implementation simply aliases getExportedValue work, since R CMD check sees right “ruse”.","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-120","dir":"Changelog","previous_headings":"","what":"box 1.2.0","title":"box 1.2.0","text":"CRAN release: 2024-02-06","code":""},{"path":"http://klmr.me/box/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"box 1.2.0","text":"Deprecation warning: next major version, ‘box’ read environment variable R_BOX_PATH , package load time. Modifying value afterwards effect, unless package unloaded reloaded. ‘box’ longer supports R 3.5 since R build infrastructure (particular ‘devtools’) longer supports .","code":""},{"path":"http://klmr.me/box/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"box 1.2.0","text":"Fix backports definitions work binary packages created using newer R versions (#347). Replace call function added R 4.0.0 make package work R 3.6.3 (#335).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"new-and-improved-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New and improved features","title":"box 1.2.0","text":"Prevent accidental misuse checking arguments box::file() box::export() unnamed (#334). method argument box::register_S3_method() now optional (#305).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-113","dir":"Changelog","previous_headings":"","what":"box 1.1.3","title":"box 1.1.3","text":"CRAN release: 2023-05-02","code":""},{"path":"http://klmr.me/box/news/index.html","id":"bug-fixes-1-1-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"box 1.1.3","text":"Silence warnings caused internal change R HTML help display functionality (#255, #278). Support loading modules inside RStudio even ‘rstudioapi’ installed (#293). crash presence missing arguments function calls inside modules (#266). Support trailing comma reexports via box::use() (#263).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"new-and-improved-features-1-1-3","dir":"Changelog","previous_headings":"","what":"New and improved features","title":"box 1.1.3","text":"Add box::topenv() function, analogous base::topenv() (#310). Support lazy loading data packages (#219). Improve error messages invalid box::use() declarations (#253). Add box::purge_cache() function force reloading modules (@kamilzyla, #236).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-112","dir":"Changelog","previous_headings":"","what":"box 1.1.2","title":"box 1.1.2","text":"CRAN release: 2022-05-11 (Version update technical reasons; changes.)","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-111","dir":"Changelog","previous_headings":"","what":"box 1.1.1","title":"box 1.1.1","text":"CRAN release: 2022-04-23 (Version update technical reasons; changes.)","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-110","dir":"Changelog","previous_headings":"","what":"box 1.1.0","title":"box 1.1.0","text":"CRAN release: 2021-09-13","code":""},{"path":"http://klmr.me/box/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"box 1.1.0","text":"Modules without @export declarations now export visible names (= names starting dot). restore previous behaviour module without exports, call box::export() inside module. box::set_script_path() now returns full path previously set, documented, just parent directory’s path. Existing code relies function’s previously incorrect behaviour need updated.","code":""},{"path":"http://klmr.me/box/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"box 1.1.0","text":"Work around broken isRunning() function Shiny ≥1.6.0 (#237). Return full path box::set_script_path(), documented, just parent directory’s path; box::script_path() now also returns path without requiring user set new path (#239). Improve detection whether code called inside RStudio (#225). Work around R bug path handling non-Windows platforms paths passed R binary contain spaces. Make HTML rendering interactive module help work Windows (#223). Prevent segfault R ≤ 3.6.1 caused missing declaration internal C symbol (#213). Allow exporting modules previously loaded using different prefix (#211). Reload dependencies reloading module (#39, #165, #195). Don’t crash presence nested, expanded functions inside modules (#203, #204).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"new-and-improved-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New and improved features","title":"box 1.1.0","text":"Improve error messages calling box::unload() box::reload() invalid argument (#232). Improve error messages module found ’s syntactic error box::use() declaration. Support legacy modules (aka. R scripts) better exporting visible names (#207). Permit specifying exports calling box::export() instead via @export declarations (#227). Add standard module core R packages (#200). Warn legacy functions imported inside modules (#206). Support modules without exports.","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-102","dir":"Changelog","previous_headings":"","what":"box 1.0.2","title":"box 1.0.2","text":"CRAN release: 2021-04-22","code":""},{"path":"http://klmr.me/box/news/index.html","id":"new-and-improved-features-1-0-2","dir":"Changelog","previous_headings":"","what":"New and improved features","title":"box 1.0.2","text":"Make box::help() work attached objects (#170). Allow trailing comma attach specification (#191). Allow loading main module submdule via box::use(.[...]) (#192).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-101","dir":"Changelog","previous_headings":"","what":"box 1.0.1","title":"box 1.0.1","text":"CRAN release: 2021-03-20","code":""},{"path":"http://klmr.me/box/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"box 1.0.1","text":"[...] now correctly attaches exported names starting dot (#186).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"new-and-improved-features-1-0-1","dir":"Changelog","previous_headings":"","what":"New and improved features","title":"box 1.0.1","text":"Allow trailing comma box::use() declaration (#172). Support loading local modules executing files opened RStudio (#187). Improve error message accessing non-existent module export via $ (#180). Improve performance accessing module export via $ (#180). Add explicit support loading local modules inside ‘testthat’ unit tests (#188).","code":""},{"path":"http://klmr.me/box/news/index.html","id":"box-100","dir":"Changelog","previous_headings":"","what":"box 1.0.0","title":"box 1.0.0","text":"CRAN release: 2021-02-12 Complete rewrite; see migration guide information. Older news can found NEWS.0.md.","code":""}]
